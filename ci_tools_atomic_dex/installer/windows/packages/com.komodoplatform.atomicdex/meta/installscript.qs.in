function Component()
{
    // installer.gainAdminRights();
    component.loaded.connect(this, this.installerLoaded);
} 

Component.prototype.createOperations = function()
{
	component.createOperations();
    if (installer.value("os") === "win") {
		// Start Menu Shortcut
        component.addOperation("CreateShortcut",
                               "@DEX_TARGET_DIR@/bin/@DEX_PROJECT_NAME@.exe",
                               "@DEX_START_MENU_DIR@/@DEX_DISPLAY_NAME@.lnk",
                               "workingDirectory=@DEX_TARGET_DIR@/bin",
                               "iconPath=@DEX_ICON_DIR@", "iconId=0",
                               "description=Start @DEX_DISPLAY_NAME@");

        // Desktop Shortcut
        component.addOperation("CreateShortcut",
                               "@DEX_TARGET_DIR@/bin/@DEX_PROJECT_NAME@.exe",
                               "@DEX_DESKTOP_DIR@/@DEX_DISPLAY_NAME@.lnk",
                               "workingDirectory=@DEX_TARGET_DIR@/bin",
                               "iconPath=@DEX_ICON_DIR@", "iconId=0",
                               "description=Start @DEX_DISPLAY_NAME@");

		// Maintenance Tool Start Menu Shortcut
        component.addOperation("CreateShortcut",
                               "@DEX_TARGET_DIR@/@DEX_MAINTENANCE_TOOL_NAME@.exe",
                               "@DEX_START_MENU_DIR@/@DEX_MAINTENANCE_TOOL_NAME@.lnk",
                               "workingDirectory=@DEX_TARGET_DIR@",
                               "iconPath=@DEX_ICON_DIR@", "iconId=0",
                               "description=Start @DEX_MAINTENANCE_TOOL_NAME@");
    }
}

Component.prototype.installerLoaded = function()
{
    installer.setDefaultPageVisible(QInstaller.TargetDirectory, false);
    installer.addWizardPage(component, "TargetWidget", QInstaller.TargetDirectory);

    targetDirectoryPage = gui.pageWidgetByObjectName("DynamicTargetWidget");
    targetDirectoryPage.windowTitle = "Choose Installation Directory";
    targetDirectoryPage.description.setText("Please select where the app will be installed:");
    targetDirectoryPage.targetDirectory.textChanged.connect(this, this.targetDirectoryChanged);
    targetDirectoryPage.targetDirectory.setText(installer.value("TargetDir"));
    targetDirectoryPage.targetChooser.released.connect(this, this.targetChooserClicked);

    gui.pageById(QInstaller.ComponentSelection).entered.connect(this, this.componentSelectionPageEntered);
}

Component.prototype.targetChooserClicked = function()
{
    var dir = QFileDialog.getExistingDirectory("", targetDirectoryPage.targetDirectory.text);
    targetDirectoryPage.targetDirectory.setText(dir);
}

Component.prototype.targetDirectoryChanged = function()
{
    var dir = targetDirectoryPage.targetDirectory.text;
    if (installer.fileExists(dir) && installer.fileExists(dir + "/maintenancetool.exe")) {
        targetDirectoryPage.warning.setText("<p style=\"color: red\">Existing installation detected and will be overwritten.</p>");
    }
    else if (installer.fileExists(dir)) {
        targetDirectoryPage.warning.setText("<p style=\"color: red\">Installing in existing directory. It will be wiped on uninstallation.</p>");
    }
    else {
        targetDirectoryPage.warning.setText("");
    }
    installer.setValue("TargetDir", dir);
}

Component.prototype.componentSelectionPageEntered = function()
{
    var dir = installer.value("TargetDir");
    if (installer.fileExists(dir) && installer.fileExists(dir + "/maintenancetool.exe")) {
        installer.execute(dir + "/maintenancetool.exe", ["purge", "-c"]);
    }
}